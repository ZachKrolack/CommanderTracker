// <auto-generated />
using System;
using CommanderTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CommanderTracker.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240520194422_Added Fields")]
    partial class AddedFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommanderTracker.Models.Deck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ColorIdentity")
                        .HasColumnType("integer")
                        .HasColumnName("color_identity");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("decks");
                });

            modelBuilder.Entity("CommanderTracker.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Turns")
                        .HasColumnType("integer")
                        .HasColumnName("turns");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("games");
                });

            modelBuilder.Entity("CommanderTracker.Models.Pilot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("pilots");
                });

            modelBuilder.Entity("CommanderTracker.Models.PlayInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("DeckId")
                        .HasColumnType("uuid")
                        .HasColumnName("deck_id");

                    b.Property<int>("EndPosition")
                        .HasColumnType("integer")
                        .HasColumnName("end_position");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("PilotId")
                        .HasColumnType("uuid")
                        .HasColumnName("pilot_id");

                    b.Property<int>("TurnOrder")
                        .HasColumnType("integer")
                        .HasColumnName("turn_order");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("GameId");

                    b.HasIndex("PilotId");

                    b.ToTable("play_instances");
                });

            modelBuilder.Entity("CommanderTracker.Models.PlayInstance", b =>
                {
                    b.HasOne("CommanderTracker.Models.Deck", "Deck")
                        .WithMany("PlayInstances")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommanderTracker.Models.Game", "Game")
                        .WithMany("PlayInstances")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommanderTracker.Models.Pilot", "Pilot")
                        .WithMany("PlayInstances")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("Game");

                    b.Navigation("Pilot");
                });

            modelBuilder.Entity("CommanderTracker.Models.Deck", b =>
                {
                    b.Navigation("PlayInstances");
                });

            modelBuilder.Entity("CommanderTracker.Models.Game", b =>
                {
                    b.Navigation("PlayInstances");
                });

            modelBuilder.Entity("CommanderTracker.Models.Pilot", b =>
                {
                    b.Navigation("PlayInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
